'''
Created on Mar 6, 2013

@author: vinesh
'''
from core.FileManager import FileManager
from mimify import File

class Monitor:
    '''
    classdocs
    '''
    def __init__(self):
        #fileManager.read()
        '''
        Constructor
        '''
                
            #Recursive function in order to keep the process going infinitely.    
    def keepMonitoring(self,oldMaxLines,dirConfig,dirLog):
        import time
        fileManager = FileManager()
        monitorObj = Monitor()
        logLines = fileManager.read(dirLog)
        
        if(oldMaxLines == len(logLines)):
            print "The log file still hasn't changed."
            time.sleep(10)
            monitorObj.keepMonitoring(oldMaxLines,dirConfig,dirLog)
        else:
            print "The log file still has changed."
            startAt = oldMaxLines
            monitorObj.startMonitoring(dirConfig, dirLog, startAt)
        
    #This function checks log files for errors
    def startMonitoring(self,dirConfig,dirLog,startAt):
        from Trigger import Trigger
        import sys
        
        sys.setrecursionlimit(10000)
       
        monitorObj = Monitor()
        triggerObj = Trigger()
        fileManager = FileManager()
        
        ruleLines = fileManager.read(dirConfig)
        logLines = fileManager.read(dirLog)
        
        for i in range(startAt,len(logLines)):
            for j in range(0,len(ruleLines)):
                #import re
                #
                #if(re.match(logLines[i],ruleLines[j])):
                if(logLines[i] == ruleLines[j]):
                    #Here should come some more code, but before that we have to know which trigger should be triggered in each situation.
                    #As for now default error is 1, this will send a mail for each error occured.
                    errorType = 1;
                    errorMsg = 'Hello Admin,<br /><br />On line '+str(i)+' of the Log file an error has been detected.<br />The file concerning the error is: '+dirLog+'.<br /><br /><i>This mail has been automatically generated by the</i><b> Security Monitor</b>'
                    triggerObj.executeTrigger(errorType,errorMsg)          
                    
        monitorObj.keepMonitoring(len(logLines),dirConfig,dirLog)
        
    def stopMonitoring(self):
        import time
        import sys
        
        print "Monitoring Ended!"
        time.sleep(10)
        sys.exit(0)